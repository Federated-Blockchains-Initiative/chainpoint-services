version: '2'

networks:
  chainpoint:
    driver: bridge

services:

  # NGINX Proxy
  #
  # An auto-scaling reverse proxy that reconfigures
  # itself based on which API services are available
  # for requests.
  #
  # See : https://github.com/jwilder/nginx-proxy
  #
  # SCALED : false
  #
  # PORTS:
  # http : 80
  #
  nginx-proxy:
    restart: always
    image: jwilder/nginx-proxy
    container_name: nginx-proxy-core
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    environment:
      NODE_ENV: development
      DEFAULT_HOST: api.local
    depends_on:
      - api
    networks:
      - chainpoint

  # HTTP API
  # Restify Node public web API service.
  #
  # Note : You don't access this directly, but through
  # the nginx-proxy load balancer. This service cannot be
  # given an explicit container_name since it needs
  # to be scalable with 'docker-compose scale api=5'
  #
  # The VIRTUAL_HOST env var is used by the nginx-proxy
  # to rebuild its reverse proxy host config and must be
  # passed in by the HTTP client:
  #
  # curl -i -H 'Host: api.local' http://127.0.0.1/
  #
  # PORTS : 8080
  #
  api:
    restart: always
    image: quay.io/chainpoint/node-api-service:${DOCKER_TAG}
    build:
      context: ./node-api-service
    depends_on:
      - roach1
      - redis
      - rabbitmq
    networks:
      - chainpoint
    environment:
      NODE_ENV: development
      CHAINPOINT_CORE_BASE_URI: ${CHAINPOINT_CORE_BASE_URI}
      ANCHOR_BTC: ${ANCHOR_BTC}
      ANCHOR_ETH: ${ANCHOR_ETH}
      VIRTUAL_HOST: api.local

  api-test:
    image: quay.io/chainpoint/node-api-service-test:${DOCKER_TAG}
    container_name: node-api-service-test
    build:
      context: ./node-api-service
      dockerfile: Dockerfile.test
    depends_on:
      - roach1
      - redis
      - rabbitmq
    networks:
      - chainpoint
    environment:
      NODE_ENV: test
      CHAINPOINT_CORE_BASE_URI: http://test.chainpoint.org
      ANCHOR_BTC: ${ANCHOR_BTC}
      ANCHOR_ETH: ${ANCHOR_ETH}
      VIRTUAL_HOST: api.local

  # Splitter
  #
  # SCALED: true
  # 
  # PORTS : none
  #
  splitter:
    restart: always
    image: quay.io/chainpoint/node-splitter-service:${DOCKER_TAG}
    build:
      context: ./node-splitter-service
    depends_on:
      - rabbitmq
    networks:
      - chainpoint
    environment:
      NODE_ENV: development

  splitter-test:
    image: quay.io/chainpoint/node-splitter-service-test:${DOCKER_TAG}
    container_name: node-splitter-service-test
    build:
      context: ./node-splitter-service
      dockerfile: Dockerfile.test
    depends_on:
      - rabbitmq
    networks:
      - chainpoint
    environment:
      NODE_ENV: test

  # Aggregator
  #
  # SCALED: true
  #
  # PORTS : none
  #
  aggregator:
    restart: always
    image: quay.io/chainpoint/node-aggregator-service:${DOCKER_TAG}
    build:
      context: ./node-aggregator-service
    depends_on:
      - rabbitmq
      - nist-beacon
    networks:
      - chainpoint
    environment:
      NODE_ENV: development

  aggregator-test:
    image: quay.io/chainpoint/node-aggregator-service-test:${DOCKER_TAG}
    container_name: node-aggregator-service-test
    build:
      context: ./node-aggregator-service
      dockerfile: Dockerfile.test
    depends_on:
      - rabbitmq
      - nist-beacon
    networks:
      - chainpoint
    environment:
      NODE_ENV: test

  # NIST Beacon
  # Retrieve and store current NIST Beacon records
  # 
  # SCALED: false
  #
  # PORTS : none
  #
  nist-beacon:
    restart: always
    image: quay.io/chainpoint/node-nist-beacon-service:${DOCKER_TAG}
    build:
      context: ./node-nist-beacon-service
    container_name: nist-beacon-core
    depends_on:
      - redis
    networks:
      - chainpoint
    environment:
      NODE_ENV: development

  # Calendar
  # Aggregate Merkle roots from the `aggregator` service instances
  # and write them to the Calendar event/block chains.
  #
  # SCALED: false
  #
  # PORTS : none
  #
  calendar:
    restart: always
    image: quay.io/chainpoint/node-calendar-service:${DOCKER_TAG}
    build:
      context: ./node-calendar-service
    container_name: calendar-core
    depends_on:
      - roach1
      - rabbitmq
    networks:
      - chainpoint
    environment:
      NODE_ENV: development
      CHAINPOINT_CORE_BASE_URI: ${CHAINPOINT_CORE_BASE_URI}
      ANCHOR_BTC: ${ANCHOR_BTC}
      ANCHOR_ETH: ${ANCHOR_ETH}
      SIGNING_SECRET_KEY: ${SIGNING_SECRET_KEY}

  # Bitcoin Fees
  # Retrieve and store recommended transaction fees for Bitcoin
  # 
  # SCALED: false
  #
  # PORTS : none
  #
  btc-fee:
    restart: always
    image: quay.io/chainpoint/node-btc-fee-service:${DOCKER_TAG}
    build:
      context: ./node-btc-fee-service
    container_name: btc-fee-core
    depends_on:
      - consul
      - rabbitmq
    networks:
      - chainpoint
    environment:
      NODE_ENV: development

  # Bitcoin Transmit
  # Send Calendar Block Merkle roots to be embedded in a BTC transaction.
  # 
  btc-tx:
    restart: always
    image: quay.io/chainpoint/node-btc-tx-service:${DOCKER_TAG}
    build:
      context: ./node-btc-tx-service
    container_name: btc-tx-core
    depends_on:
      - roach1
      - consul
      - rabbitmq
      - btc-fee
    networks:
      - chainpoint
    environment:
      NODE_ENV: development
      CHAINPOINT_CORE_BASE_URI: ${CHAINPOINT_CORE_BASE_URI}
      BCOIN_API_BASE_URI: ${BCOIN_API_BASE_URI}
      BCOIN_API_WALLET_ID: ${BCOIN_API_WALLET_ID}
      BCOIN_API_USERNAME: ${BCOIN_API_USERNAME}
      BCOIN_API_PASS: ${BCOIN_API_PASS}

  # Bitcoin Transmit Monitor
  # Monitor and report on the state of BTC transactions this app has submitted.
  #
  btc-mon:
    restart: always
    image: quay.io/chainpoint/node-btc-mon-service:${DOCKER_TAG}
    build:
      context: ./node-btc-mon-service
    container_name: btc-mon-core
    depends_on:
      - rabbitmq
    networks:
      - chainpoint
    environment:
      NODE_ENV: development
      BCOIN_API_BASE_URI: ${BCOIN_API_BASE_URI}
      BCOIN_API_WALLET_ID: ${BCOIN_API_WALLET_ID}
      BCOIN_API_USERNAME: ${BCOIN_API_USERNAME}
      BCOIN_API_PASS: ${BCOIN_API_PASS}

  # Ethereum TNT Transer Monitor
  # Monitor and report on the state of TNT tokens.
  #
  eth-mon:
    restart: always
    image: quay.io/chainpoint/node-eth-mon-service:${DOCKER_TAG}
    build:
      context: ./node-eth-mon-service
    container_name: btc-eth-core
    depends_on:
      - testrpc
      - roach1
    networks:
      - chainpoint
    environment:
      NODE_ENV: development
      ETH_TNT_LISTEN_ADDR: ${ETH_TNT_LISTEN_ADDR}
    command: npm run dev
    volumes:
    - ./node-eth-mon-service/scripts:/home/node/app/scripts
    - ./node-eth-mon-service/loaders:/home/node/app/loaders

  # Proof State
  # Encapsulates all persistent data storage for partial proof data.
  # 
  proof-state:
    restart: always
    image: quay.io/chainpoint/node-proof-state-service:${DOCKER_TAG}
    build:
      context: ./node-proof-state-service
    depends_on:
      - rabbitmq
      - postgres
    networks:
      - chainpoint
    environment:
      NODE_ENV: development
      ANCHOR_BTC: ${ANCHOR_BTC}
      ANCHOR_ETH: ${ANCHOR_ETH}

  # Proof Generation
  # Responsible for constructing, signing, and validating Chainpoint proofs
  # for Calendar, Bitcoin, and Ethereum attestation levels.
  # 
  proof-gen:
    restart: always
    image: quay.io/chainpoint/node-proof-gen-service:${DOCKER_TAG}
    build:
      context: ./node-proof-gen-service
    depends_on:
      - rabbitmq
    networks:
      - chainpoint
    environment:
      NODE_ENV: development

  # Node Auditing
  # Responsible for auditing the availability, time, and calendar state
  # of public Tierion Network Nodes
  #
  audit:
    restart: always
    image: quay.io/chainpoint/node-audit-service:${DOCKER_TAG}
    build:
      context: ./node-audit-service
    depends_on:
      - roach1
    networks:
      - chainpoint
    environment:
      NODE_ENV: development

  # Postgres
  #
  # See : https://hub.docker.com/_/postgres/
  # Note: Connect locally on OS X:
  #
  # Installs local client 'psql'
  #   brew install postgres
  #
  # Connect (uname/pass chainpoint/chainpoint):
  #   psql -h 127.0.0.1 -U chainpoint
  #
  postgres:
    restart: always
    image: postgres:9.6.2-alpine
    container_name: postgres-core
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: chainpoint
      POSTGRES_PASSWORD: chainpoint
    ports:
      - "5432:5432"
    networks:
      - chainpoint

  # RabbitMQ
  #
  # Admin Page (username:pass)
  # http://127.0.0.1:15673/ (rabbitmq:rabbitmq)
  #
  # LOCAL PORTS:
  # amqp : 5673 (+1 over default)
  # http : 15673 (+1 over default)
  #
  rabbitmq:
    restart: always
    image: rabbitmq:3.6.9-management-alpine
    container_name: rabbitmq-core
    hostname: rabbitmq
    ports:
    - 5673:5672
    - 15673:15672
    environment:
      RABBITMQ_DEFAULT_USER: chainpoint
      RABBITMQ_DEFAULT_PASS: chainpoint
    networks:
      - chainpoint

  # Redis
  #
  # LOCAL PORTS:
  # redis : 6380 (+1 over default)
  #
  redis:
    restart: always
    image: redis:3.2.9-alpine
    container_name: redis-core
    ports:
      - "6380:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./data/redis:/data
    networks:
      - chainpoint
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf

  # Consul
  #
  # Consul Admin UI: http://127.0.0.1:8500
  #
  consul:
    restart: always
    image: consul:0.8.5
    container_name: consul-core
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
    volumes:
      - ./data/consul:/consul/data
    networks:
      - chainpoint

  # CockroachDB
  #
  # CockroachDB Admin UI: http://127.0.0.1:8080
  #
  roach1:
    restart: always
    image: cockroachdb/cockroach:v1.0.3
    container_name: roach1-core
    ports:
      - "26257:26257"
      - "8080:8080"
    volumes:
      - ./data/roach1:/cockroach/cockroach-data
    command:
      - start
      - --insecure
    networks:
      - chainpoint

  # bcoin:
  #   image: quay.io/chainpoint/bcoin:${DOCKER_TAG}
  #   build:
  #     context: ./bcoin
  #   container_name: bcoin-core
  #   restart: unless-stopped
  #   ports:
  #     #-- Mainnet
  #     # - "8333:8333"
  #     # - "8332:8332" # RPC
  #     #-- Testnet
  #     - "18333:18333"
  #     - "18332:18332" # RPC
  #   environment:
  #     BCOIN_CONFIG: /root/.bcoin/bcoin.conf
  #     # VIRTUAL_HOST: bcoin.chainpoint.org
  #     # VIRTUAL_PORT: 8332 # Mainnet
  #     VIRTUAL_PORT: 18332 # Testnest
  #   volumes:
  #     - ./data/bcoin:/root/.bcoin
  #   networks:
  #     - chainpoint

  testrpc:
    image: quay.io/chainpoint/testrpc:${DOCKER_TAG}
    build:
      context: ./testrpc
    container_name: testrpc-core
    restart: unless-stopped
    ports:
      - "8545:8545" # RPC
    networks:
      - chainpoint